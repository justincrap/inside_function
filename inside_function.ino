const unsigned char epd_bitmap_heartbeat [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xe0, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0x80, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0x07, 0x00, 0x00, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xc2, 0x0f, 0xf8, 0x07, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xe0, 0x1f, 0xfe, 0x03, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xf0, 0x7f, 0xff, 0x01, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0x81, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xfc, 0xff, 0x7f, 0x80, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x80, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xc0, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xc0, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x9f, 0xc0, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0xdf, 0x80, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0xdf, 0x80, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0xef, 0x81, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xbd, 0xef, 0x01, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe6, 0x9d, 0xf7, 0x03, 0xff,
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xdd, 0xf0, 0x03, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xdd, 0xfe, 0x07, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0xfc, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xeb, 0xf8, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xf0, 0x1f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xe0, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xc0, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x81, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

#define USE_ARDUINO_INTERRUPTS true
#include <PulseSensorPlayground.h>

#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define Trigpin 6
#define Echopin 5
#define low_led 9
#define high_led 10
#define OLED_RESET -1
#include <SoftwareSerial.h>
#include <WiFiEsp.h>
#include <ThingSpeak.h>
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void pulsesensor();
void ultrasonic();
void showimage();


int status = WL_IDLE_STATUS;
WiFiEspClient client;
char ssid[] = "EE3070_P1615_1";  //your network SSID (name)
char pass[] = "EE3070P1615";  //your network password
float distance;
int duration;

const int PulseWire = A0;
const int LED13 = 13;
int Threshold = 550;

int button1 = 52;
int button2 = 53;
int cnt = 0;

int blue_light_pin = 38;
int green_light_pin = 40;
int red_light_pin = 42;


int randomNum = 10;

long total_time[4];
long time1, time2;

unsigned long PrivateChannelNumber = 1886454;
const char*  myWriteAPIKeyPrivate = "8SD0HS3OJ3CDO03O";
const char*  myReadAPIKeyPrivate = "FZROAQV5R96WUQUI" ;

PulseSensorPlayground pulseSensor;

void setup() {
  pinMode (Trigpin, OUTPUT);
  pinMode (Echopin, INPUT);

  pinMode(blue_light_pin, OUTPUT);  //for reaction test
  pinMode(green_light_pin, OUTPUT);
  pinMode(red_light_pin, OUTPUT);

  Serial.begin(115200);
  Serial1.begin(115200);
  WiFi.init(&Serial1);

  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  display.clearDisplay();

  pulseSensor.analogInput(PulseWire);
  pulseSensor.blinkOnPulse(LED13);
  pulseSensor.setThreshold(Threshold);

  if (!pulseSensor.begin()) {
    Serial.println("pulsesensor not working.");  //This prints one time at Arduino power - up,  or on Arduino reset.
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID ");
    Serial.println(ssid);
    while (WiFi.status() != WL_CONNECTED) {
      WiFi.begin(ssid, pass);  //Connect to WPAWPA2 network
      Serial.print(".");
      delay(5000);
    }
    Serial.println("nConnected");
  }
  printWifiData();
  ThingSpeak.begin(client);

  digitalWrite (low_led, LOW);
  digitalWrite (high_led, LOW);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
}

void loop() {
  display.clearDisplay();
  boolean button1state = LOW;
  boolean button2state = LOW;
  button1state = digitalRead(button1);
  button2state = digitalRead(button2);

  if (button1state == HIGH) {
    Serial.print(F("button 1 on for "));
    Serial.println(cnt);
    digitalWrite(button1, LOW);
    displaymenu(cnt);
    cnt = cnt + 1;
    delay(500);
  }

  delay(100);

  /*display
    display.setCursor(10, 10);
    display.setTextSize(4);
    display.setTextColor(SSD1306_WHITE);
    display.print(distance);
    display.display();*/



}

/*void showimage(const unsigned char image1){

  display.clearDisplay();
  display.setCursor(0,0);
  display.drawBitmap(0, 0, image1, 128, 64, WHITE);
  display.display();
  }*/

long test_reaction() {
  // put your main code here, to run repeatedly:
  for (int i = 0 ; i < 3; i++) {
    analogWrite(red_light_pin, 255);  //red
    randomNum = random(3, 10);
    while (randomNum > 0) {
      randomNum--;
      delay(1000);
    }
    time1 = micros();
    analogWrite(red_light_pin, 0);  //red
    analogWrite(blue_light_pin, 255);  //blue
    while (digitalRead(button1) == LOW) {
      //time2 = micros();
    }
    time2 = micros();
    total_time[i] = time1 - time2;
    analogWrite(blue_light_pin, 0);  //blue
    randomNum = random(10);
    Serial.println(F("press button 2 for next round"));
    while (digitalRead(button2) == LOW) {
      //empty wait for response
    }

  }
  total_time[4] = 0;
  for (int i = 0; i < 3; i++) {
    total_time[4] = total_time[4] + total_time[i];
  }
  //total_time[4]=total_time[4]/3;
  float finals = abs(total_time[4] / 3000); //average time unit in ms
  Serial.print(finals);
  Serial.println("ms.");
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.println("Reaction Time: ");
  display.print(finals);
  display.display();
  ThingSpeak.setField(3, finals);
  ThingSpeak.writeFields(PrivateChannelNumber, myWriteAPIKeyPrivate);
  delay(1000);
  display.clearDisplay();
  display.setCursor(0, 0);

  //return total_time[4]; //return the average reaction time
}

void ultrasonic() {

  digitalWrite(Trigpin, LOW);
  delayMicroseconds(2);
  digitalWrite(Trigpin, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trigpin, LOW);

  duration = pulseIn(Echopin, HIGH);
  distance = duration * 0.034 / 2;
  Serial.println ( );

  if (distance > 15) {
    Serial.println ("Distance = ");
    Serial.print (distance);
    Serial.print (" CM");
    Serial.println ( );
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.println("Distance ");
    display.print(distance);
    display.print(" cm");
    display.display();
    ThingSpeak.setField(1, distance);
    ThingSpeak.writeFields(PrivateChannelNumber, myWriteAPIKeyPrivate);
    delay(1000);
    display.clearDisplay();
    display.setCursor(0, 0);
  }
  else {
    Serial.println("Nobody Is Infront Of the Sensor");
  }

  return;
}

void pulsesensor() {

  int myBPM = pulseSensor.getBeatsPerMinute();

  pulseSensor.sawStartOfBeat();
  if (myBPM > 30 && myBPM < 220) {
    Serial.print("BPM ");
    Serial.println(myBPM);
    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.println("BPM ");
    display.print(myBPM);
    display.display();
    ThingSpeak.setField(2, myBPM);
    ThingSpeak.writeFields(PrivateChannelNumber, myWriteAPIKeyPrivate);
    delay(2000);
    display.clearDisplay();
    display.setCursor(0, 0);
  }
  return;
}

void displaymenu(int a) {
  display.clearDisplay();
  int menuNum = a % 4;



  switch (menuNum) {
    case 0:
      display.setCursor(0, 0);
      display.setTextSize(3);
      display.setTextColor(SSD1306_WHITE);
      display.println(F("Mode: 1"));
      display.display();
      while (digitalRead(button1) == LOW){
        ultrasonic();}
      break;

    case 1:
      display.setCursor(0, 0);
      display.setTextSize(3);
      display.setTextColor(SSD1306_WHITE);
      display.println(F("Mode: 2"));
      display.display();
      delay(1000);
      display.clearDisplay();
      while (digitalRead(button1) == LOW) {
        pulsesensor();
      }
      break;

    case 2:
      display.setCursor(0, 0);
      display.setTextSize(3);
      display.setTextColor(SSD1306_WHITE);
      display.println(F("Mode: 3"));
      display.display();

      test_reaction();

      break;
    case 3:
      display.setCursor(0, 0);
      display.setTextSize(3);
      display.setTextColor(SSD1306_WHITE);
      display.println(F("Mode: 4"));
      display.display();
      delay(1000);
      display.clearDisplay();
      display.setCursor(0, 0);
      display.drawBitmap(0, 0, epd_bitmap_heartbeat, 128, 64, WHITE);
      display.display();
      //showimage(epd_bitmap_heartbeat);
      break;
  }
  return ;
}

void printWifiData() {
  //print your WiFi shield's IP address
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address ");
  Serial.print(ip);
  Serial.print(".");
  if (ip[0] == 0 && ip[1] == 0 && ip[2] == 0 && ip[3] == 0) {
    Serial.println(" IP FALL !!!");
  }
  Serial.println();
}
