const unsigned char epd_bitmap_heartbeat[] PROGMEM = { // print heartbeat image
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xe0, 0x00, 0x7f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0x80, 0x00, 0x3f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0x07, 0x00, 0x00, 0x0f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xc2, 0x0f, 0xf8, 0x07, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xe0, 0x1f, 0xfe, 0x03, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xf0, 0x7f, 0xff, 0x01, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0x81, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xfc, 0xff, 0x7f, 0x80, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x80, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xc0, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xc0, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x9f, 0xc0, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0xdf, 0x80, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0xdf, 0x80, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0xef, 0x81, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xbd, 0xef, 0x01, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe6, 0x9d, 0xf7, 0x03, 0xff,
    0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xdd, 0xf0, 0x03, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xdd, 0xfe, 0x07, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0xfc, 0x0f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xeb, 0xf8, 0x0f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xf0, 0x1f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xe0, 0x3f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xc0, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x81, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x03, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

// 'chess_bmp', 128x64px
const unsigned char epd_bitmap_chess_bmp [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x03, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x0f, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x3f, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x3f, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x7f, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x7f, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x3f, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x1f, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x3f, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x7f, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x8f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x8f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x8f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x0f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x0f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x1f, 0xfe, 0x3f, 0xff, 0xfe, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x3f, 0xfe, 0x1f, 0xff, 0x86, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x3f, 0xfe, 0x1f, 0xff, 0x7e, 0xff, 0xff, 0xef, 0xff, 0xff, 0xef, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x3f, 0xff, 0x1f, 0xfe, 0xfe, 0xff, 0xff, 0xef, 0xff, 0xff, 0xef, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x3f, 0xff, 0x0f, 0xfe, 0xfe, 0x9e, 0x3c, 0x6c, 0xa6, 0x78, 0xc3, 0x1f, 0xff, 
	0xff, 0xff, 0xfc, 0x7f, 0xff, 0x8f, 0xfe, 0xfe, 0x6d, 0xdb, 0xeb, 0x99, 0xbf, 0x6e, 0xef, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xff, 0x87, 0xfe, 0xfe, 0xec, 0x1b, 0xe7, 0xbb, 0xb8, 0x6e, 0x0f, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xff, 0x83, 0xfe, 0xfe, 0xed, 0xfb, 0xe3, 0xbb, 0xb7, 0x6e, 0xff, 0xff, 
	0xff, 0xff, 0xf9, 0xff, 0xff, 0xc3, 0xff, 0x7e, 0xed, 0xfb, 0xed, 0xbb, 0xb7, 0x6e, 0xff, 0xff, 
	0xff, 0xff, 0xf1, 0xff, 0xff, 0xe3, 0xff, 0x8e, 0xee, 0x3c, 0x6e, 0xbb, 0xb0, 0x73, 0x1f, 0xff, 
	0xff, 0xff, 0xf1, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf3, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf3, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf3, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xe7, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xc7, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// 'BLOOD O2', 59x75px
const unsigned char epd_bitmap_BLOOD_O2 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0x40, 0x0f, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xf0, 0x08, 0x00, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xe0, 
	0xff, 0xff, 0xe0, 0x1c, 0x00, 0x7f, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0x7e, 0x00, 0x3f, 0xff, 0xe0, 
	0xff, 0xff, 0x80, 0x7f, 0x00, 0x1f, 0xff, 0xe0, 0xff, 0xff, 0xa2, 0x7f, 0x00, 0x1f, 0xff, 0xe0, 
	0xff, 0xff, 0x00, 0x7f, 0x00, 0x0f, 0xff, 0xe0, 0xff, 0xfe, 0x01, 0x7e, 0x00, 0x0f, 0xff, 0xe0, 
	0xff, 0xfe, 0x00, 0x7e, 0x00, 0x07, 0xff, 0xe0, 0xff, 0xfc, 0x80, 0x00, 0x1f, 0x83, 0xff, 0xe0, 
	0xff, 0xfc, 0x00, 0x00, 0x3f, 0xc3, 0xff, 0xe0, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xe1, 0xff, 0xe0, 
	0xff, 0xf0, 0x00, 0x00, 0x3f, 0xe1, 0xff, 0xe0, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xe0, 0xff, 0xe0, 
	0xff, 0xe0, 0x00, 0x00, 0x3f, 0xe0, 0x7f, 0xe0, 0xff, 0xe8, 0x00, 0x00, 0x3f, 0xe0, 0x7f, 0xe0, 
	0xff, 0xe0, 0x00, 0x00, 0x3f, 0xc0, 0x7f, 0xe0, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0x80, 0x3f, 0xe0, 
	0xff, 0x80, 0x00, 0x00, 0x02, 0x00, 0x1f, 0xe0, 0xff, 0x80, 0x00, 0x0e, 0x00, 0x00, 0x1f, 0xe0, 
	0xff, 0x10, 0x00, 0xff, 0xf0, 0x00, 0x0f, 0xe0, 0xff, 0x00, 0x13, 0xff, 0xfc, 0x00, 0x0f, 0xe0, 
	0xff, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x0f, 0xe0, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x07, 0xe0, 
	0xfc, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x03, 0xe0, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0x80, 0x03, 0xe0, 
	0xfc, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x03, 0xe0, 0xfc, 0x00, 0x7f, 0xc0, 0x3f, 0xe0, 0x03, 0xe0, 
	0xfc, 0x00, 0x7f, 0x80, 0x3f, 0xe0, 0x01, 0xe0, 0xf8, 0x00, 0xff, 0x0f, 0x1f, 0xf0, 0x01, 0xe0, 
	0xf8, 0x01, 0xfe, 0x3f, 0x87, 0xf0, 0x01, 0xe0, 0xf8, 0x01, 0xfe, 0x3f, 0xc7, 0xf0, 0x01, 0xe0, 
	0xf8, 0x01, 0xfe, 0x3f, 0xc7, 0xf0, 0x01, 0xe0, 0xf8, 0x01, 0xfe, 0x3f, 0xc7, 0xf0, 0x01, 0xe0, 
	0xf8, 0x01, 0xfe, 0x3f, 0xc7, 0xf8, 0x01, 0xe0, 0xf8, 0x01, 0xfe, 0x3f, 0xc7, 0xf0, 0x01, 0xe0, 
	0xf8, 0x01, 0xfe, 0x3f, 0xc4, 0xf0, 0x01, 0xe0, 0xf8, 0x01, 0xff, 0x1f, 0x8f, 0x70, 0x01, 0xe0, 
	0xfc, 0x00, 0xff, 0x86, 0x1f, 0x70, 0x01, 0xe0, 0xfc, 0x00, 0xff, 0x80, 0x3e, 0xf0, 0x03, 0xe0, 
	0xfd, 0x00, 0x7f, 0xe0, 0xfc, 0xe0, 0x03, 0xe0, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x03, 0xe0, 
	0xfe, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0x03, 0xe0, 0xff, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x07, 0xe0, 
	0xff, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x0f, 0xe0, 0xff, 0x10, 0x0f, 0xff, 0xff, 0x00, 0x0f, 0xe0, 
	0xff, 0x80, 0x03, 0xff, 0xfc, 0x00, 0x1f, 0xe0, 0xff, 0xd0, 0x00, 0x7f, 0xe0, 0x00, 0x3f, 0xe0, 
	0xff, 0xe0, 0x00, 0x3f, 0xc0, 0x00, 0x3f, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 
	0xff, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 
	0xff, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xe0, 
	0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0
};

// 'eye54x38', 54x38px
const unsigned char epd_bitmap_eye54x38 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xfc, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xfc, 0xff, 
	0xfe, 0x00, 0x00, 0x07, 0xff, 0xfc, 0xff, 0xfc, 0x00, 0x60, 0x01, 0xff, 0xfc, 0xff, 0xf0, 0x03, 
	0xfe, 0x00, 0x7f, 0xfc, 0xff, 0xc0, 0x0f, 0xff, 0x00, 0x3f, 0xfc, 0xff, 0x80, 0x1f, 0x9f, 0x80, 
	0x1f, 0xfc, 0xff, 0x00, 0x3c, 0x1f, 0xc0, 0x0f, 0xfc, 0xfe, 0x00, 0x78, 0x1f, 0xe0, 0x03, 0xfc, 
	0xfc, 0x00, 0x70, 0x1f, 0xe0, 0x01, 0xfc, 0xf8, 0x00, 0x70, 0x1f, 0x70, 0x00, 0xfc, 0xf0, 0x00, 
	0xe0, 0x0e, 0x70, 0x00, 0xfc, 0xe0, 0x00, 0xe0, 0x00, 0x70, 0x00, 0x7c, 0xe0, 0x00, 0xe0, 0x00, 
	0x70, 0x00, 0x7c, 0xf0, 0x00, 0xe0, 0x00, 0x70, 0x00, 0x7c, 0xf8, 0x00, 0xf0, 0x00, 0x70, 0x00, 
	0xfc, 0xf8, 0x00, 0x70, 0x00, 0xf0, 0x01, 0xfc, 0xfc, 0x00, 0x78, 0x00, 0xe0, 0x03, 0xfc, 0xfe, 
	0x00, 0x3c, 0x01, 0xe0, 0x07, 0xfc, 0xff, 0x80, 0x1f, 0x07, 0xc0, 0x0f, 0xfc, 0xff, 0xc0, 0x0f, 
	0xff, 0x80, 0x3f, 0xfc, 0xff, 0xe0, 0x07, 0xfe, 0x00, 0x7f, 0xfc, 0xff, 0xf8, 0x01, 0xf8, 0x01, 
	0xff, 0xfc, 0xff, 0xfe, 0x00, 0x00, 0x03, 0xff, 0xfc, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xfc, 
	0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc
};

// 'pulse', 59x49px
const unsigned char epd_bitmap_pulse [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xaf, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0x2f, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0x67, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0x67, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xbf, 0xfe, 0x67, 0xff, 0xfb, 0xff, 0xe0, 0xff, 0xbf, 0xfe, 0x67, 0xff, 0xfb, 0xff, 0xe0, 
	0xff, 0x1f, 0xfe, 0x67, 0xff, 0xf1, 0xff, 0xe0, 0xff, 0x5f, 0xfe, 0xe7, 0xff, 0xf1, 0xff, 0xe0, 
	0xff, 0x5f, 0xfc, 0xe7, 0xff, 0xf5, 0xff, 0xe0, 0xff, 0x5f, 0xfd, 0xf7, 0xff, 0xe5, 0xff, 0xe0, 
	0xfe, 0xd8, 0x01, 0xf7, 0xe0, 0x05, 0xff, 0xe0, 0xff, 0xd8, 0x01, 0xf3, 0xc0, 0x0d, 0xbf, 0xe0, 
	0xff, 0xeb, 0xff, 0xf3, 0xdf, 0xfe, 0xbf, 0xe0, 0xff, 0xeb, 0xff, 0xf3, 0xdf, 0xfe, 0xff, 0xe0, 
	0xff, 0xe3, 0xff, 0xfb, 0x9f, 0xfe, 0xff, 0xe0, 0xff, 0xe7, 0xff, 0xfb, 0x9f, 0xfe, 0x7f, 0xe0, 
	0xff, 0xe7, 0xff, 0xf9, 0x9f, 0xfe, 0x7f, 0xe0, 0xff, 0xe7, 0xff, 0xf9, 0xbf, 0xff, 0x7f, 0xe0, 
	0xff, 0xff, 0xff, 0xf9, 0x3f, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xf9, 0x7f, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xf9, 0x7f, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0
};

 // 'bloodglucose', 59x64px
const unsigned char epd_bitmap_bloodglucose [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xf1, 0x1f, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xe3, 0x1f, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xc7, 0x8f, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xcf, 0xc7, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0x8f, 0xe7, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0x1f, 0xe3, 0xff, 0xff, 0xe0, 0xff, 0xfe, 0xfe, 0x3f, 0xf1, 0xff, 0xff, 0xe0, 
	0xff, 0xf8, 0x3f, 0x3f, 0xf9, 0xff, 0xff, 0xe0, 0xff, 0xe0, 0x1f, 0xff, 0xf8, 0xff, 0xff, 0xe0, 
	0xff, 0xc3, 0x87, 0xff, 0xfc, 0x7f, 0xff, 0xe0, 0xff, 0x0f, 0xe1, 0xff, 0xfc, 0x7f, 0xff, 0xe0, 
	0xfc, 0x3f, 0xf0, 0x7f, 0xfe, 0x3f, 0xff, 0xe0, 0xf8, 0x7f, 0xfc, 0x3f, 0xff, 0x3f, 0xff, 0xe0, 
	0xf0, 0xff, 0xfe, 0x3f, 0xff, 0x1f, 0xff, 0xe0, 0xf0, 0x3f, 0xf8, 0x3f, 0xff, 0x9f, 0xff, 0xe0, 
	0xf1, 0x0f, 0xe1, 0x3f, 0xff, 0x8f, 0xff, 0xe0, 0xf1, 0x87, 0x87, 0x3f, 0xff, 0xcf, 0xff, 0xe0, 
	0xf1, 0xe1, 0x0f, 0x3f, 0xff, 0xc7, 0xff, 0xe0, 0xf1, 0xf8, 0x3f, 0x3f, 0xff, 0xe7, 0xff, 0xe0, 
	0xf1, 0xfc, 0xff, 0x3f, 0xff, 0xe3, 0xff, 0xe0, 0xf1, 0xfc, 0xff, 0x3f, 0xff, 0xe3, 0xff, 0xe0, 
	0xf1, 0xfc, 0xff, 0x3f, 0xff, 0xf3, 0xff, 0xe0, 0xf1, 0xfc, 0xff, 0x3f, 0xff, 0xf1, 0xff, 0xe0, 
	0xf1, 0xfc, 0xff, 0x3f, 0xff, 0xf1, 0xff, 0xe0, 0xf0, 0xfc, 0xfe, 0x3f, 0xff, 0xf9, 0xff, 0xe0, 
	0xfc, 0x3c, 0xf8, 0x7f, 0xff, 0xf8, 0xff, 0xe0, 0xfe, 0x0c, 0xe1, 0xff, 0xfe, 0x78, 0xff, 0xe0, 
	0xff, 0x84, 0xc3, 0xff, 0xfe, 0x7c, 0xff, 0xe0, 0xff, 0xe0, 0x0f, 0xff, 0xfe, 0x7c, 0xff, 0xe0, 
	0xff, 0xf8, 0x3f, 0xff, 0xfe, 0x3c, 0xff, 0xe0, 0xff, 0xfc, 0x7f, 0xff, 0xfe, 0x3c, 0x7f, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x3c, 0x7f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x7f, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x7f, 0xe0, 0xff, 0xf8, 0xff, 0xff, 0xfe, 0x3c, 0x7f, 0xe0, 
	0xff, 0xfc, 0xff, 0xff, 0xfe, 0x3c, 0x7f, 0xe0, 0xff, 0xfc, 0xff, 0xff, 0xfe, 0x3c, 0x7f, 0xe0, 
	0xff, 0xfc, 0xff, 0xff, 0xfe, 0x3c, 0xff, 0xe0, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7c, 0xff, 0xe0, 
	0xff, 0xfc, 0x7f, 0xff, 0xf8, 0x78, 0xff, 0xe0, 0xff, 0xfe, 0x3f, 0xff, 0xf0, 0xf8, 0xff, 0xe0, 
	0xff, 0xfe, 0x3f, 0xdf, 0xc0, 0xf1, 0xff, 0xe0, 0xff, 0xff, 0x1f, 0xc0, 0x03, 0xf1, 0xff, 0xe0, 
	0xff, 0xff, 0x1f, 0xe0, 0x07, 0xe3, 0xff, 0xe0, 0xff, 0xff, 0x8f, 0xf8, 0x3f, 0xc7, 0xff, 0xe0, 
	0xff, 0xff, 0xc7, 0xff, 0xff, 0x87, 0xff, 0xe0, 0xff, 0xff, 0xe1, 0xff, 0xff, 0x0f, 0xff, 0xe0, 
	0xff, 0xff, 0xf0, 0xff, 0xfc, 0x1f, 0xff, 0xe0, 0xff, 0xff, 0xf8, 0x1f, 0xf0, 0x7f, 0xff, 0xe0, 
	0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0
};

// 'wifi error', 128x64px
const unsigned char epd_bitmap_wifi_error [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xf0, 0x00, 0x7f, 0xff, 
	0xff, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xc0, 0x00, 0x3f, 0xff, 
	0xff, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x07, 0xff, 
	0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x07, 0xff, 
	0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x03, 0xff, 
	0xff, 0x80, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xf8, 0x00, 0xf8, 0x01, 0xff, 
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0xf8, 0x01, 0xff, 
	0xfe, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0xf8, 0x00, 0x7f, 
	0xfc, 0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0xf8, 0x00, 0x7f, 
	0xf8, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0xf0, 0x00, 0x7f, 
	0xf0, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0xf0, 0x00, 0x7f, 
	0xe0, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0xf0, 0x00, 0x3f, 
	0xe0, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0xf0, 0x00, 0x1f, 
	0x80, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0xf0, 0x00, 0x1f, 
	0x80, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0xf0, 0x00, 0x1f, 
	0x80, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0xf0, 0x00, 0x1f, 
	0xe0, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0xf0, 0x00, 0x1f, 
	0xf0, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0xf0, 0x00, 0x1f, 
	0xf8, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0xf0, 0x00, 0x1f, 
	0xfe, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x3f, 
	0xfe, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x3f, 
	0xff, 0x87, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfc, 0x01, 0xe0, 0x00, 0xf0, 0x00, 0x7f, 
	0xff, 0xc7, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0xe0, 0x00, 0xf8, 0x00, 0x7f, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xf0, 0x00, 0xf8, 0x00, 0x7f, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf0, 0x00, 0xf8, 0x00, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x70, 0x00, 0xf8, 0x00, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbc, 0x00, 0x20, 0x01, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x03, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x07, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x0f, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xff, 
	0xff, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfe, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf3, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff
};

#define USE_ARDUINO_INTERRUPTS true
#include <PulseSensorPlayground.h>

#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include <SoftwareSerial.h>
#include <WiFiEsp.h>    //setup wifi
#include <ThingSpeak.h> //setup thingspeak

#include <Wire.h>
#include <Adafruit_MLX90614.h> //gas sensor

#define SCREEN_WIDTH 128 // define oled size
#define SCREEN_HEIGHT 64
#define OLED_RESET -1

#define Trigpin 6 // setup ultrasonic sensor
#define Echopin 5
#define low_led 9
#define high_led 10

#define voltageCheckPin A4

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET); // setup oled
Adafruit_MLX90614 mlx = Adafruit_MLX90614();

void pulsesensor();
void ultrasonic();
void blood_glucose();
void IR_temp();
void buttonWait();
void eyetest();
// void showimage();

int status = WL_IDLE_STATUS;
WiFiEspClient client;
char ssid[] = "EE3070_P1615_1"; // your network SSID (name)
char pass[] = "EE3070P1615";    // your network password

float distance; // for ultrasonic sensor
int duration;

const int PulseWire = A0; // pulse sensor pin
const int LED13 = 13;
int Threshold = 550;

int button1 = 52; // setup button
int button2 = 53;
int cnt = 0;

int eyepoint = 0;

int BGLcounter = 0;
int totalBGL = 0;

int blue_light_pin = 38; // setup led for body testing
int green_light_pin = 40;
int red_light_pin = 42;

int randomNum = 10;

long total_time[4]; // store reaction time
long time1, time2;

unsigned long PrivateChannelNumber = 1886454;
const char *myWriteAPIKeyPrivate = "8SD0HS3OJ3CDO03O";
const char *myReadAPIKeyPrivate = "FZROAQV5R96WUQUI";

PulseSensorPlayground pulseSensor;

void setup()
{
  pinMode(Trigpin, OUTPUT);
  pinMode(Echopin, INPUT);

  pinMode(blue_light_pin, OUTPUT); // for reaction test
  pinMode(green_light_pin, OUTPUT);
  pinMode(red_light_pin, OUTPUT);

  Serial.begin(115200);
  Serial1.begin(115200);
  WiFi.init(&Serial1);

  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  display.clearDisplay();

  pulseSensor.analogInput(PulseWire);
  pulseSensor.blinkOnPulse(LED13);
  pulseSensor.setThreshold(Threshold);

  if (!pulseSensor.begin())
  {                                             // pulsesensor test availbility
    Serial.println("pulsesensor not working."); // This prints one time at Arduino power - up,  or on Arduino reset.
  }

  if (WiFi.status() != WL_CONNECTED)
  {
    Serial.print("Attempting to connect to SSID ");
    Serial.println(ssid);
    while (WiFi.status() != WL_CONNECTED)
    {
      WiFi.begin(ssid, pass); // Connect to WPAWPA2 network
      Serial.print(".");
      delay(5000);
    }
    Serial.println("Connected");
  }
  printWifiData();
  ThingSpeak.begin(client);

  digitalWrite(low_led, LOW);
  digitalWrite(high_led, LOW);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
  {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }
  if (!mlx.begin())
  {
    Serial.println("Error connecting to MLX sensor. Check wiring.");
    while (1)
      ;
    Serial.print("Emissivity = ");
    Serial.println(mlx.readEmissivity());
    Serial.println("================================================");
  };
}

void loop()
{
  display.clearDisplay();
  boolean button1state = LOW;
  boolean button2state = LOW;
  button1state = digitalRead(button1);
  button2state = digitalRead(button2);

  if (button1state == HIGH)
  {
    Serial.print(F("button 1 on for "));
    Serial.println(cnt);
    digitalWrite(button1, LOW);
    displaymenu(cnt);
    cnt = cnt + 1;
    delay(500);
  }
  delay(100);
}

/*void showimage(const unsigned char image1){

  display.clearDisplay();
  display.setCursor(0,0);
  display.drawBitmap(0, 0, image1, 128, 64, WHITE);
  display.display();
  }
*/

long test_reaction()
{
  // put your main code here, to run repeatedly:
  for (int i = 0; i < 3; i++)
  {
    analogWrite(red_light_pin, 255); // red
    randomNum = random(3, 10);
    while (randomNum > 0)
    {
      randomNum--;
      delay(1000);
    }
    time1 = micros();
    analogWrite(red_light_pin, 0);    // red
    analogWrite(blue_light_pin, 255); // blue
    while (digitalRead(button1) == LOW)
    {
      // time2 = micros();
    }
    time2 = micros();
    total_time[i] = time1 - time2;
    analogWrite(blue_light_pin, 0); // blue
    randomNum = random(10);
    Serial.println(F("press button 2 for next round"));
    while (digitalRead(button2) == LOW)
    {
      // empty wait for response
    }
  }
  total_time[4] = 0;
  for (int i = 0; i < 3; i++)
  {
    total_time[4] = total_time[4] + total_time[i];
  }
  // total_time[4]=total_time[4]/3;
  float finals = abs(total_time[4] / 3000); // average time unit in ms
  Serial.print(finals);
  Serial.println("ms.");
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.println("Reaction Time: ");
  display.print(finals);
  display.display();
  ThingSpeak.setField(3, finals);
  ThingSpeak.writeFields(PrivateChannelNumber, myWriteAPIKeyPrivate);
  delay(1000);
  display.clearDisplay();
  display.setCursor(0, 0);

  // return total_time[4]; //return the average reaction time
}

void ultrasonic()
{

  digitalWrite(Trigpin, LOW);
  delayMicroseconds(2);
  digitalWrite(Trigpin, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trigpin, LOW);

  duration = pulseIn(Echopin, HIGH);
  distance = duration * 0.034 / 2;
  Serial.println();

  if (distance > 15)
  {
    Serial.println("Distance = ");
    Serial.print(distance);
    Serial.print(" CM");
    Serial.println();
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.println("Distance ");
    display.print(distance);
    display.print(" cm");
    display.display();
    ThingSpeak.setField(1, distance);
    ThingSpeak.writeFields(PrivateChannelNumber, myWriteAPIKeyPrivate);
    delay(1000);
    display.clearDisplay();
    display.setCursor(0, 0);
  }
  else
  {
    Serial.println("Nobody Is Infront Of the Sensor");
  }

  return;
}

void pulsesensor()
{

  int myBPM = pulseSensor.getBeatsPerMinute();

  pulseSensor.sawStartOfBeat();
  if (myBPM > 30 && myBPM < 220)
  {
    Serial.print("BPM ");
    Serial.println(myBPM);
    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.println("BPM ");
    display.print(myBPM);
    display.display();
    ThingSpeak.setField(2, myBPM);
    ThingSpeak.writeFields(PrivateChannelNumber, myWriteAPIKeyPrivate);
    delay(2000);
    display.clearDisplay();
    display.setCursor(0, 0);
  }
  return;
}

void displaymenu(int a)
{
  display.clearDisplay();
  int menuNum = a % 4;

  switch (menuNum)
  {
  case 0:
    display.setCursor(0, 0);
    display.setTextSize(3);
    display.setTextColor(SSD1306_WHITE);
    display.println(F("Mode: 1"));
    display.display();
    while (digitalRead(button1) == LOW)
    {
      ultrasonic();
    }
    break;

  case 1:
    display.setCursor(0, 0);
    display.setTextSize(3);
    display.setTextColor(SSD1306_WHITE);
    display.println(F("Mode: 2"));
    display.display();
    delay(1000);
    display.clearDisplay();
    while (digitalRead(button1) == LOW)
    {
      pulsesensor();
    }
    break;

  case 2:
    display.setCursor(0, 0);
    display.setTextSize(3);
    display.setTextColor(SSD1306_WHITE);
    display.println(F("Mode: 3"));
    display.display();

    test_reaction();

    break;
  case 3:
    display.setCursor(0, 0);
    display.setTextSize(3);
    display.setTextColor(SSD1306_WHITE);
    display.println(F("Mode: 4"));
    display.display();
    delay(1000);
    display.clearDisplay();
    display.setCursor(0, 0);
    display.drawBitmap(0, 0, epd_bitmap_heartbeat, 128, 64, WHITE);
    display.display();
    // showimage(epd_bitmap_heartbeat);
    break;
  }
  return;
}

void printWifiData()
{
  // print your WiFi shield's IP address
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address ");
  Serial.print(ip);
  Serial.print(".");
  if (ip[0] == 0 && ip[1] == 0 && ip[2] == 0 && ip[3] == 0)
  {
    Serial.println(" IP FALL !!!");
  }
  Serial.println();
}

void blood_glucose()
{
  while (BGLcounter < 10)
  {
    float gas_sensor_value = analogRead(A7);
    float Volt = gas_sensor_value * 5.0 / 1024.0;
    float BGL = (158.12 * Volt) - 639.35;
    if (BGL > 45)
    {
      // Serial.println(BGL);
      totalBGL += BGL;
      delay(250);
      BGLcounter++;
    }
  }
  Serial.print("BGL: ");
  Serial.print(totalBGL / BGLcounter);
  Serial.println("mg/dl");
  if (BGLcounter >= 10)
  {
    totalBGL = 0;
    BGLcounter = 0;
  }
}

void IR_temp()
{
  Serial.print("Temp in C: ");
  Serial.println(mlx.readObjectTempC());
  delay(250);
}

void buttonWait(int buttonPin1, int buttonPin2)
{
  int buttonState1 = 0;
  int buttonState2 = 0;
  while (1)
  {
    buttonState1 = digitalRead(buttonPin1);
    buttonState2 = digitalRead(buttonPin2);
    if (buttonState1 == HIGH)
    {
      eyepoint = eyepoint + 1;
      return;
    }
    else if (buttonState2 == HIGH)
    {
      return;
    }
  }
}
void eyetest()
{

  eyepoint = 0;
  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_WHITE);
  display.print("Welcome to the eye test.");
  display.print("The test is initalizing, please wait...");
  delay(3000);

  // tut for Y/N button, standing length

  display.clearDisplay(); //#1
  display.setTextSize(7);
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_WHITE);
  display.print("F");
  display.display();
  buttonWait(button1, button2); // wait for button press on pin 2

  delay(1000);
  display.clearDisplay();
  display.setTextSize(6);
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_WHITE);
  display.print("F P");
  display.display();
  buttonWait(button1, button2); // wait for button press on pin 2

  delay(1000);

  display.clearDisplay();
  display.setTextSize(5);
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_WHITE);
  display.print("T O ");
  display.display();
  buttonWait(button1, button2); // wait for button press on pin 2

  delay(1000);

  display.clearDisplay(); //#4
  display.setTextSize(4);
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_WHITE);
  display.print("L P E D");
  display.display();
  buttonWait(button1, button2); // wait for button press on pin 2

  delay(1000);

  display.clearDisplay();
  display.setTextSize(3);
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_WHITE);
  display.print("P E C F D");
  display.display();
  buttonWait(button1, button2); // wait for button press on pin 2

  delay(1000);

  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_WHITE);
  display.print("E D F C Z P");
  display.display();
  buttonWait(button1, button2); // wait for button press on pin 2

  delay(1000);

  display.clearDisplay(); //#7
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_WHITE);
  display.print("F E L O P Z D");
  display.display();
  buttonWait(button1, button2); // wait for button press on pin 2

  delay(1000);

  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_WHITE);
  display.print(F("Your level of eyes  is "));
  display.print(eyepoint);
  display.println("/7.");
  display.display();
  buttonWait(button1, button2); // wait for button press on pin 2
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("This is   the end of eye test.");
  display.display();

  buttonWait(button1, button2); // wait for button press on pin 2
}

void BatteryLevelCheck()
{ // need 2k ohm resistor
  analogValue = analogRead(voltageCheckPin);
  Serial.println(analogValue);
  delay(1000);
  input_voltage = (analogValue * 5.0) / 1024.0;
  Serial.println(input_voltage);

  if (input_voltage < 0.50 && input_voltage >= 0.00)
  {
    Serial.println("10%");
    analogWrite(red_light_pin, 255); // red
    analogWrite(green_light_pin, 0); // green
  }
  else if (input_voltage < 1.00 && input_voltage >= 0.50)
  {
    Serial.println("20%%");
    analogWrite(red_light_pin, 255);  // red
    analogWrite(green_light_pin, 63); // green
  }
  else if (input_voltage < 1.50 && input_voltage >= 1.00)
  {
    Serial.println("30%");
    analogWrite(red_light_pin, 255);   // red
    analogWrite(green_light_pin, 127); // green
  }
  else if (input_voltage < 2.00 && input_voltage >= 1.50)
  {
    Serial.println("40%");
    analogWrite(red_light_pin, 255);   // red
    analogWrite(green_light_pin, 191); // green
  }
  else if (input_voltage < 2.50 && input_voltage >= 2.00)
  {
    Serial.println("50%");
    analogWrite(red_light_pin, 255);   // red
    analogWrite(green_light_pin, 255); // green
  }
  else if (input_voltage < 3.00 && input_voltage >= 2.50)
  {
    Serial.println("60%");
    analogWrite(red_light_pin, 204);   // red
    analogWrite(green_light_pin, 255); // green
  }
  else if (input_voltage < 3.50 && input_voltage >= 3.00)
  {
    Serial.println("70%");
    analogWrite(red_light_pin, 153);   // red
    analogWrite(green_light_pin, 255); // green
  }
  else if (input_voltage < 4.00 && input_voltage >= 3.50)
  {
    Serial.println("80%");
    analogWrite(red_light_pin, 102);   // red
    analogWrite(green_light_pin, 255); // green
  }
  else if (input_voltage < 4.50 && input_voltage >= 4.00)
  {
    Serial.println("90%");
    analogWrite(red_light_pin, 51);    // red
    analogWrite(green_light_pin, 255); // green
  }
  else if (input_voltage < 5.00 && input_voltage >= 4.50)
  {
    Serial.println("100%");
    analogWrite(red_light_pin, 0);     // red
    analogWrite(green_light_pin, 255); // green
  }
  delay(500);
}